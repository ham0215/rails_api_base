type Book {
  id: Int!
  title: String!
}

"""
The connection type for Book.
"""
type BookConnection {
  """
  A list of edges.
  """
  edges: [BookEdge]

  """
  A list of nodes.
  """
  nodes: [Book]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type BookEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Book
}

type BookImage {
  book: Book!
  contentType: String!
  id: Int!
  name: String!
  path: String!
}

type Mutation {
  uploadBookImage(
    """
    Parameters for UploadBookImage
    """
    input: UploadBookImageInput!
  ): BookImage
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Portfolio {
  id: Int!
  name: String!
  url: String!
}

"""
The connection type for Portfolio.
"""
type PortfolioConnection {
  """
  A list of edges.
  """
  edges: [PortfolioEdge]

  """
  A list of nodes.
  """
  nodes: [Portfolio]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type PortfolioEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Portfolio
}

type Profile {
  address: String
  id: Int!
  skills(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SkillConnection!
}

type Query {
  """
  ユーザー一覧を取得する
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!
}

type Skill {
  id: Int!
  name: String!
}

"""
The connection type for Skill.
"""
type SkillConnection {
  """
  A list of edges.
  """
  edges: [SkillEdge]

  """
  A list of nodes.
  """
  nodes: [Skill]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type SkillEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Skill
}

scalar Upload

"""
Autogenerated input type of UploadBookImage
"""
input UploadBookImageInput {
  bookId: Int!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  image: Upload!
}

type User {
  books(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BookConnection!
  email: String!
  id: Int!
  name: String!
  portfolios(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PortfolioConnection!
  profile: Profile
}

"""
The connection type for User.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}
